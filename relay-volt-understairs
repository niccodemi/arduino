/**Relay-volt-understair, Mysensors 2.3.0
 * The MySensors Arduino library handles the wireless radio link and protocol
 * between your home built sensors/actuators and HA controller of choice.
 * The sensors forms a self healing radio network with optional repeaters. Each
 * repeater and gateway builds a routing tables in EEPROM which keeps track of the
 * network topology allowing messages to be routed to nodes.
 *
 * Created by Henrik Ekblad <henrik.ekblad@mysensors.org>
 * Copyright (C) 2013-2015 Sensnology AB
 * Full contributor list: https://github.com/mysensors/Arduino/graphs/contributors
 *
 * Documentation: http://www.mysensors.org
 * Support Forum: http://forum.mysensors.org
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * version 2 as published by the Free Software Foundation.
 *
 *******************************
 *
 * REVISION HISTORY
 * Version 1.0 - Henrik Ekblad
 * 
 * DESCRIPTION
 * Example sketch showing how to control physical relays. 
 * This example will remember relay state after power failure.
 * http://www.mysensors.org/build/relay
 */ 

// Enable debug prints to serial monitor
//#define MY_DEBUG 

// Enable and select radio type attached
#define MY_RADIO_NRF24
//#define MY_RADIO_RFM69

//(if not LOW, then issues with ACK in openhab, myscontroller)
#define MY_RF24_PA_LEVEL RF24_PA_LOW

// Enable repeater functionality for this node
#define MY_REPEATER_FEATURE

//Set Static ID
#define MY_NODE_ID 1

#define MY_PARENT_NODE_ID 20
#define MY_PARENT_NODE_IS_STATIC

#include <SPI.h>
#include <MySensors.h>

#define RELAY_1  3  // Arduino Digital I/O pin number for first relay (second on pin+1 etc)
#define NUMBER_OF_RELAYS 5 // Total number of attached relays
#define RELAY_ON 0  // GPIO value to write to turn on attached relay
#define RELAY_OFF 1 // GPIO value to write to turn off attached relay
#define ID_S_MULTIMETERV 6 

const int volt_pin = A0;
float value = 0;

MyMessage msg_S_MULTIMETERv(ID_S_MULTIMETERV,V_VOLTAGE);

void before() { 
  for (int sensor=1, pin=RELAY_1; sensor<=NUMBER_OF_RELAYS;sensor++, pin++) {
    // Then set relay pins in output mode
    pinMode(pin, OUTPUT);   
    // Set relay to last known state (using eeprom storage) 
    digitalWrite(pin, loadState(sensor)?RELAY_ON:RELAY_OFF);
  }
}

void setup() {
  sendHeartbeat();
  wait(50);
}

void presentation()  
{   
  // Send the sketch version information to the gateway and Controller
  wait(50);
  sendSketchInfo("Relay-volt-understair", "1.0");
  wait(80);
  

  //for (int sensor=1, pin=RELAY_1; sensor<=NUMBER_OF_RELAYS;sensor++, pin++) {
    // Register all sensors to gw (they will be created as child devices)
    present(1, S_LIGHT);
    wait(50);
    present(2, S_LIGHT);
    wait(50);
    present(3, S_LIGHT);
    wait(50);
    present(4, S_LIGHT);
    wait(50);
    present(5, S_LIGHT);
    wait(50);
    present(ID_S_MULTIMETERV,V_VOLTAGE);  
    wait(50);
  }
//}


void loop() 
{
   value = analogRead(volt_pin);
   float charge = (value / 1023) * 23.4598; //calibrated 25volt sensor module
   //Serial.print("INPUT V= ");
   //Serial.println(charge, 2);
   send(msg_S_MULTIMETERv.set(charge, 2));
   wait(300000);
}

void receive(const MyMessage &message) {
  // We only expect one type of message from controller. But we better check anyway.
  if (message.type==V_LIGHT) {
     // Change relay state
     digitalWrite(message.sensor-1+RELAY_1, message.getBool()?RELAY_ON:RELAY_OFF);
     // Store state in eeprom
     saveState(message.sensor, message.getBool());
     // Write some debug info
     //Serial.print("Incoming change for sensor:");
     //Serial.print(message.sensor);
     //Serial.print(", New status: ");
     //Serial.println(message.getBool());
   } 
}
