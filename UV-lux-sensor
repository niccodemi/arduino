/**
 * Lux (BH1750) and UV sensor, mysensors 2.1.0
 * DESCRIPTION
 * Arduino UVM-30A
 * Index table taken from: http://www.elecrow.com/sensors-c-111/environment-c-111_112/uv-sensor-moduleuvm30a-p-716.html
 * Because this table is pretty lineair, we can calculate a UVI with one decimal
 *
 * Connect sensor UV:
 *
 *   +   >>> 5V
 *   -   >>> GND
 *   out >>> A3
 *
 *  Connect lux sensor BH1750
 *
 *   VCC  >>> 5V
 *   Gnd  >>> Gnd
 *   ADDR >>> NC or GND  
 *   SCL  >>> A5
 *   SDA  >>> A4
 */

//Set Static ID
#define MY_NODE_ID 6

// Enable debug prints to serial monitor
//#define MY_DEBUG

// Enable and select radio type attached
#define MY_RADIO_NRF24
//#define MY_RADIO_RFM69

#define MY_RF24_PA_LEVEL RF24_PA_LOW   //(if not LOW, then issues with ACK in openhab, myscontroller)

#include <SPI.h>
#include <MySensors.h>  
#include <BH1750.h>
#include <Wire.h>

#define UV_SENSOR_ANALOG_PIN 3

#define CHILD_ID_UV 0
#define CHILD_ID_LIGHT 1

unsigned long SLEEP_TIME = 120000; // Sleep time between reads (in milliseconds)

BH1750 lightSensor;

MyMessage uvMsg(CHILD_ID_UV, V_UV);
// V_LIGHT_LEVEL should only be used for uncalibrated light level 0-100%.
// If your controller supports the new V_LEVEL variable, use this instead for
// transmitting LUX light level.
//MyMessage msg(CHILD_ID_LIGHT, V_LIGHT_LEVEL);
MyMessage msg(CHILD_ID_LIGHT, V_LEVEL);  

uint16_t lastlux;

unsigned long lastSend =0;
float uvIndex;
float lastUV = -1;
uint16_t uvIndexValue [12] = { 50, 227, 318, 408, 503, 606, 696, 795, 881, 976, 1079, 1170};

void setup()  
{ 
  lightSensor.begin();
}

void presentation()
{
  // Send the sketch version information to the gateway and Controller
  sendSketchInfo("UV-Lux", "1.0");
  wait(80);
  // Register all sensors to gateway (they will be created as child devices)
  present(CHILD_ID_UV, S_UV);
  wait(80);
  present(CHILD_ID_LIGHT, S_LIGHT_LEVEL);
  wait(80);
  sendHeartbeat();
  wait(80);
}

void loop()
{
  unsigned long currentTime = millis();

  uint16_t uv = analogRead(UV_SENSOR_ANALOG_PIN);// Get UV value
  if (uv>1170) {
    uv=1170;
  }

  //Serial.print("UV Analog reading: ");
  //Serial.println(uv);

  int i;
  for (i = 0; i < 12; i++) {
    if (uv <= uvIndexValue[i]) {
      uvIndex = i;
      break;
    }
  }

  //calculate 1 decimal if possible
  if (i>0) {
    float vRange=uvIndexValue[i]-uvIndexValue[i-1];
    float vCalc=uv-uvIndexValue[i-1];
    uvIndex+=(1.0/vRange)*vCalc-1.0;
  }

  //Serial.print("UVI: ");
  //Serial.println(uvIndex,2);

  //Send value to gateway if changed, or at least every 5 minutes
  if ((uvIndex != lastUV)||(currentTime-lastSend >= 5UL*60UL*1000UL)) {
    lastSend=currentTime;
    send(uvMsg.set(uvIndex,2));
    lastUV = uvIndex;
  }
  uint16_t lux = lightSensor.readLightLevel();// Get Lux value
  Serial.println(lux);
  if (lux != lastlux) {
      send(msg.set(lux));
      lastlux = lux;
  }
  sleep(SLEEP_TIME);
}
