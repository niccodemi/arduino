/**Soilmoisture-temp(dallas), Mysensors 2.3.0
 * openhab moisture use as distance
 * DESCRIPTION
 *
 * Example sketch showing how to send in DS1820B OneWire temperature readings back to the controller
 * http://www.mysensors.org/build/temp
 */

// Enable debug prints to serial monitor
//#define MY_DEBUG 

// Enable and select radio type attached
#define MY_RADIO_NRF24
//#define MY_RADIO_RFM69

#define MY_RF24_PA_LEVEL RF24_PA_LOW   //(if not LOW, then issues with ACK in openhab, myscontroller)

// Set static node ID
#define MY_NODE_ID 14

#include <SPI.h>
#include <MySensors.h>  
#include <DallasTemperature.h>
#include <OneWire.h>

#define COMPARE_TEMP 0 // Send temperature only if changed? 1 = Yes 0 = No
#define SOIL_CHILD_ID 2 
#define ONE_WIRE_BUS 3 // Pin where dallase sensor is connected 
#define MAX_ATTACHED_DS18B20 16
unsigned long SLEEP_TIME = 300000; // Sleep time between reads (in milliseconds)
OneWire oneWire(ONE_WIRE_BUS); // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
DallasTemperature sensors(&oneWire); // Pass the oneWire reference to Dallas Temperature. 
float lastTemperature[MAX_ATTACHED_DS18B20];
int numSensors=0;
bool receivedConfig = false;
bool metric = true;
//Soil-moisture
const int sensor_pin = A0;  /* Soil moisture sensor O/P pin */
int soilPower = 5;//Variable for Soil moisture Power
float moisture_percentage = 0;
int sensor_analog = 0;
  
// Initialize temperature message
MyMessage msg(0,V_TEMP);
MyMessage msgsoil(SOIL_CHILD_ID, V_DISTANCE);

void before()
{
  // Startup up the OneWire library
  sensors.begin();
}

void setup()  
{ 
  // requestTemperatures() will not block current thread
  sensors.setWaitForConversion(false);
  pinMode(soilPower, OUTPUT);//Set D5 as an OUTPUT
  digitalWrite(soilPower, LOW);//Set to LOW so no power is flowing through the sensor
}

void presentation() {
  // Send the sketch version information to the gateway and Controller
  sendSketchInfo("Soil-sensor", "1.1");
  wait(150);

  // Fetch the number of attached temperature sensors  
  numSensors = sensors.getDeviceCount();

  // Present all sensors to controller
  for (int i=0; i<numSensors && i<MAX_ATTACHED_DS18B20; i++) {   
     present(i, S_TEMP);
     wait(100);
     present(SOIL_CHILD_ID, S_DISTANCE);
     wait(100);
  }
}

void loop()     
{  
  //float moisture_percentage;
  //int sensor_analog;
  digitalWrite(soilPower, HIGH);//turn D5 "On"
  wait(360);//wait 360 milliseconds, voltage to stabilize
  sensor_analog = analogRead(sensor_pin);
  digitalWrite(soilPower, LOW);//turn D5 "Off"
  moisture_percentage = ( 100 - ( (sensor_analog/1023.00) * 100 ) );
  //Serial.print("Moisture Percentage = ");
  //Serial.println(moisture_percentage);
  //Serial.print("%\n\n");
  //Serial.println(sensor_analog); //highest reading 1023, dry soil, lovest reading 0 - wet soil
  //send(msgsoil.set((int32_t)ceil(moisture_percentage)));
  send(msgsoil.set(moisture_percentage, 2));
  wait(100);
     
  // Fetch temperatures from Dallas sensors
  sensors.requestTemperatures();

  // query conversion time and sleep until conversion completed
  int16_t conversionTime = sensors.millisToWaitForConversion(sensors.getResolution());
  // sleep() call can be replaced by wait() call if node need to process incoming messages (or if node is repeater)
  wait(conversionTime);

  // Read temperatures and send them to controller 
  for (int i=0; i<numSensors && i<MAX_ATTACHED_DS18B20; i++) {

    // Fetch and round temperature to one decimal
    float temperature = static_cast<float>(static_cast<int>((getControllerConfig().isMetric?sensors.getTempCByIndex(i):sensors.getTempFByIndex(i)) * 10.)) / 10.;

    // Only send data if temperature has changed and no error
    #if COMPARE_TEMP == 1
    if (lastTemperature[i] != temperature && temperature != -127.00 && temperature != 85.00) {
    #else
    if (temperature != -127.00 && temperature != 85.00) {
    #endif

      // Send in the new temperature
      send(msg.setSensor(i).set(temperature,1));
      // Save new temperatures for next compare
      lastTemperature[i]=temperature;
    }
  }
  sendHeartbeat();
  wait(SLEEP_TIME);
}
