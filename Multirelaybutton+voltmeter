//RelayMomentartButton+Voltmeter, Mysensors 2.0

//#define MY_DEBUG                             // Enable debug prints to serial monitor

#define MY_RADIO_NRF24

#define MY_RF24_PA_LEVEL RF24_PA_LOW   //(if not LOW, then issues with ACK in openhab, myscontroller)

#define MY_REPEATER_FEATURE

//Set Static node id
//#define MY_NODE_ID 250

#include <MySensors.h>
#include <SPI.h>
#include <Bounce2.h>
#define RELAY_ON 0                      // switch around for realy HIGH/LOW state
#define RELAY_OFF 1
#define ID_S_MULTIMETERV 1                   // Multimeter device for voltage measurement
//

#define noRelays 1                     //2-4
const int relayPin[] = {3};          //  switch around pins to your desire
const int buttonPin[] = {4};      //  switch around pins to your desire
int voltagePin = A0;              // analog pin voltage sensor 
int voltSenseMax = 25000;        // set to the maximum voltage in millivolts of sensor or use for calibration

class Relay             // relay class, store all relevant data (equivalent to struct)
{
public:                                      
  int buttonPin;                   // physical pin number of button
  int relayPin;             // physical pin number of relay
  byte oldValue;                    // last Values for key (debounce)
  boolean relayState;               // relay status (also stored in EEPROM)
};

Relay Relays[noRelays]; 
Bounce debouncer[noRelays];
MyMessage msg_S_MULTIMETERv(ID_S_MULTIMETERV,V_VOLTAGE);
MyMessage msg[noRelays];

void setup(){
    sendHeartbeat();
    wait(250);
    // Initialize Relays with corresponding buttons
    for (int i = 0; i < noRelays; i++){
    Relays[i].buttonPin = buttonPin[i];              // assign physical pins
    Relays[i].relayPin = relayPin[i];
    msg[i].sensor = i;                                   // initialize messages
    msg[i].type = V_LIGHT;
    debouncer[i] = Bounce();                        // initialize debouncer
    debouncer[i].attach(buttonPin[i]);
    debouncer[i].interval(5);
    pinMode(Relays[i].buttonPin, INPUT_PULLUP);
    //digitalWrite(Relays[i].relayPin, RELAY_OFF);
    wait(250);
    pinMode(Relays[i].relayPin, OUTPUT);
    Relays[i].relayState = loadState(i);                               // retrieve last values from EEPROM
    digitalWrite(Relays[i].relayPin, Relays[i].relayState? RELAY_ON:RELAY_OFF);   // and set relays accordingly
    send(msg[i].set(Relays[i].relayState? true : false));                  // make controller aware of last status  
    wait(250);
    //pinMode(voltagePin, INPUT);
    }
}
void presentation()  {
      sendSketchInfo("MultiRelayButtonVolt", "0.9f");
      wait(250);
      for (int i = 0; i < noRelays; i++)
      present(i, S_LIGHT);                               // present sensor to gateway
      wait(50);
      present(ID_S_MULTIMETERV,V_VOLTAGE);                // Register Sensor to gateway 
}
void loop()
    {
    for (byte i = 0; i < noRelays; i++){
    debouncer[i].update();
    byte value = debouncer[i].read();
    if (value != Relays[i].oldValue && value==0){
    Relays[i].relayState = !Relays[i].relayState;
    digitalWrite(Relays[i].relayPin, Relays[i].relayState?RELAY_ON:RELAY_OFF);
    send(msg[i].set(Relays[i].relayState? true : false));
    saveState( i, Relays[i].relayState );}                 // save sensor state in EEPROM (location == sensor number)
    
        Relays[i].oldValue = value;      
    }
uplinkCheck(30);                                       // call function to send data, in seconds 
}
// process incoming message 
void receive(const MyMessage &message){        
   if (message.type == V_LIGHT){ 
   if (message.sensor <noRelays){            // check if message is valid for relays..... previous line  [[[ if (message.sensor <=noRelays){ ]]]
   Relays[message.sensor].relayState = message.getBool(); 
   digitalWrite(Relays[message.sensor].relayPin, Relays[message.sensor].relayState? RELAY_ON:RELAY_OFF); // and set relays accordingly
   saveState( message.sensor, Relays[message.sensor].relayState ); // save sensor state in EEPROM (location == sensor number)
   }
  }
}
/*-------------------start of functions--------------------------*/

void uplinkCheck(int frequency) {
  static unsigned long lastUpdateTime;
  if (millis() - lastUpdateTime >= frequency * 1000UL)
  {
  if (request( ID_S_MULTIMETERV, V_VOLTAGE)) {          // request the current voltage data from the controller and check that the request was succsessful
  //Serial.println("uplink established");
  int voltRead =  analogRead(voltagePin);
  int voltMilli = map(voltRead,0,1023,0,voltSenseMax);  // map the reading and get the result in millivolts
  send(msg_S_MULTIMETERv.set(voltMilli / 1000.0, 2));   // Divide by 1000 to convert back to volts to two decimal places, send data to controller.  
  }
  else{
    Serial.println(" No uplink ");      
  }
  lastUpdateTime += frequency * 1000UL;
}
}
